<section class="text-center">
  <h1>Add a shadowing shift</h1>

  <%= form_with url: create_event_volunteers_path, method: :get do %>

    <div class="row">
      <div class="col">
        <label for="space_input">Space</label>
        <br>
        <select name="space" id="space_input" class="form-select" required>
          <option value="makerspace">Makerspace</option>
          <option value="brunsfield centre">Brunsfield Centre</option>
        </select>
      </div>
      <div class="col">
        <%= label_tag :user_id, "User" %>
        <%= select_tag(:user_id, {prompt: "Choose User..."} , {:class => "user_select form-control", :id => "user_select"}) %>
        <br>
      </div>
    </div>

      <br><br>

    <div class="row">
      <div class="col">
        <%= text_field_tag "datepicker_start", nil, autocomplete: 'off', class: "form-control" %>
      </div>
        <span>TO</span>
      <div class="col">
        <%= text_field_tag "datepicker_end", nil, autocomplete: 'off', class: "form-control" %>
      </div>
    </div>

    <br>

    <%= submit_tag "Add Event", class: "btn btn-primary" %>

  <% end %>
</section>

<script type="text/javascript" charset="utf-8">
    flatpickr('#datepicker_start',{
        enableTime: true,
        time_24hr: true,
    });
    flatpickr('#datepicker_end',{
        enableTime: true,
        time_24hr: true,
    });
    document.addEventListener("turbolinks:load",function(){
      new TomSelect("#user_select",{
        searchField: ['name'],
        valueField: 'id',
        labelField: 'name',
        options: [],
        maxOptions: 5,
        searchPlaceholder: 'Choose User...',
        searchOnKeyUp: true,
        load: function (type,callback) {
            if (type.length < 2) { return; } else {
                let url = "/volunteers/populate_users?search=" + type;
                fetch(url).then(response => response.json()).then(data => {
                    callback(data.users.map(user => {return {id: user.id, name: user.name}}));
                });
            }
        },
        shouldLoad: function (type) {
            return type.length > 2;
        }
      })
    });
</script>